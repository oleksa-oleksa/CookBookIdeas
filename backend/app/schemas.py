from pydantic import BaseModel
from typing import List, Optional
from datetime import date

class Receipt(BaseModel):
    """
    Receipt: This schema is used for returning data from the database 
    (e.g., in a GET request). It can include fields that should be 
    returned to the client, like id, which might not be part of the request
    when creating the receipt but should be included when retrieving it.

    Pydantic Receipt: This represents the structure of the data
    that gets sent or received via the API. It is often used to ensure
    that the API receives valid input and returns correctly structured output.

    Pydantic model in schemas.py for data output serialization (returning data to the client).
    This Pydantic model is separate from the SQLAlchemy Receipt model
    because the output response model may differ slightly from how the data is stored.
    """
    id: int
    title: str
    photo_url: Optional[str]
    ingredients: List[str]
    preparation_steps: str
    tags: List[str]
    date_added: date
    date_cooked: Optional[date]
    rating: Optional[int]

    class Config:
        from_attributes = True  # Replace orm_mode with from_attributes


class ReceiptCreate(BaseModel):
    """
    ReceiptCreate: This schema is specifically for incoming data when creating a new receipt. 
    Some  fields (like id or date_added) are generated by the database. 
    This schema ensures that only the necessary fields for creation are validated.
    """
    title: str
    photo_url: Optional[str]
    ingredients: List[str]
    preparation_steps: str
    tags: List[str]
    date_added: date
    date_cooked: Optional[date]
    rating: Optional[int]

    class Config:
        from_attributes = True